pipeline {
  agent {
    kubernetes {
      cloud 'kubernetes'
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            agent: jenkins-agent
        spec:
          serviceAccount: jenkins
          containers:
          - name: curl
            image: gcr.io/cloud-builders/curl:latest
            command:
            - cat
            tty: true
          - name: vault
            image: hashicorp/vault
            command:
            - cat
            tty: true
      '''
    }
  }
  parameters {
    string(name: 'vaulturl', defaultValue: 'http://vault.vault.svc.cluster.local:8200', description: 'Vault API URL')
    // string(name: 'vaultpath', defaultValue: 'kv/cicd', description: 'Secrets path for Vault secrets')
  }
  stages {
    stage ('Tools') {
      steps {
        container('curl') {
            sh """
            echo "Downloading JQ to parse JSON responses"
            curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o ./jq
            chmod 755 ./jq
            ./jq --version
            """
        }
      }
    }
    stage ('Token') {
      steps {
        container('curl') {
            sh """
            curl -X POST -d "{ \\"role\\": \\"jenkins\\", \\"jwt\\": \\"\$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\\" }" ${params.vaulturl}/v1/auth/kubernetes/login > k8s.json
            ./jq -r '.auth.client_token' k8s.json > .vault_token
            """
        }
      }
    }
    stage ('SecretCurl') {
      steps {
        container('curl') {
          sh """
          curl -H \"X-Vault-Token: \$(cat .vault_token)\" -X GET  ${params.vaulturl}/v1/kv/data/cicd
          """
        }
      }
    }
    stage ('SecretVault') {
      steps {
        container('vault') {
          sh """
          export VAULT_TOKEN="\$(cat .vault_token)"
          export VAULT_ADDR="${params.vaulturl}"
          vault kv get kv/cicd
          """
        }
      }
    }
  }
}